#include <stdio.h>
#include <iostream>
#include <cstring>
#include <fstream>

using namespace std;

int main(int argc, char ** argv) {
  string type, line;
  char cmdGenRandKCNF[128], cmdDeleteTmpFile[128], fileName[128];
  int k, n, m, l;
  double p;
  fstream file_in, file_out;

  if(argc == 1) goto usage;
  else {
    type = argv[1];
    if(type == "2ssat") {
      if(argc != 7) {
        cout << "  Invalid number of arguments !" << endl;
        goto usage;
      }
      // Begin to generate 2ssat .sdimacs file
      // R(p) X_l E Y_n-l . CNF(X, Y)
      k = atoi(argv[2]);
      n = atoi(argv[3]);
      m = atoi(argv[4]);
      l = atoi(argv[5]);
      p = atof(argv[6]);
      sprintf(cmdGenRandKCNF, "cnfgen --output tmp-%d-%d-%d.dimacs --output-format dimacs randkcnf %d %d %d", k, n, m, k, n, m);
      if(system(cmdGenRandKCNF)) {
        cout << "  Error! Problems with cnfgen...\n";
        return 1;
      }
      printf("  Generate tmp-%d-%d-%d.dimacs\n", k, n, m);
      printf("  Use k = %d, n = %d, m = %d, l = %d, p = %f\n", k, n, m, l, p);

      sprintf(fileName, "tmp-%d-%d-%d.dimacs", k, n, m);
      file_in.open(fileName, ios::in);
      // sprintf(fileName, "2ssat-rand-kcnf-%d-%d-%d-%d-%f.dimacs", k, n, m, l, p);
      sprintf(fileName, "rand-%d-%d-%d.sdimacs", k, n, m);
      file_out.open(fileName, ios::out);

      while(getline(file_in, line)) {
        if (line[0] == 'p')
          file_out << "c sdimacs generated by gen-sdimacs\n" << "c\n";
        
        file_out << line << '\n';
        
        if (line[0] == 'p') {
          // r p [vars]
          file_out << "r " << p;
          for(int i = 0; i < l; ++i) {
            file_out << " " << i+1;
          }
          file_out << " 0\n";
          // e [vars]
          file_out << "e ";
          for(int i = l; i < n; ++i) {
            file_out << " " << i+1;
          }
          file_out << " 0\n";
        }
      }

      file_in.close();
      file_out.close();
      
      sprintf(cmdDeleteTmpFile, "rm -f tmp-%d-%d-%d.dimacs", k, n, m);
      system(cmdDeleteTmpFile);
    }
    else {
        cout << "  Invalid type !" << endl;
        goto usage;
    }
  }

  return 0;

  usage:
    printf("  gen-sdimacs <type> [arguments]\n");
    printf("    <type>  : 2ssat\n");
    printf("      2ssat : <k> <n> <m> <l> <p>\n");
    printf("        <k> : k literals per clause\n");
    printf("        <n> : n variables\n");
    printf("        <m> : m clauses\n");
    printf("        <l> : l length of random vars\n");
    printf("        <p> : probability with random\n");
  return 0;
} 
